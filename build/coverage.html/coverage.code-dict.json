{"/home/travis/build/npmtest/node-npmtest-rsvg/test.js":"/* istanbul instrument in package npmtest_rsvg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rsvg/lib.npmtest_rsvg.js":"/* istanbul instrument in package npmtest_rsvg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rsvg = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rsvg = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rsvg/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rsvg && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rsvg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rsvg\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rsvg.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_rsvg.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rsvg.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_rsvg.__dirname + '/lib.npmtest_rsvg.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rsvg/node_modules/rsvg/index.js":"'use strict';\n\nvar binding = require('./build/Release/rsvg');\nvar Writable = require('stream').Writable;\nvar util = require('util');\n\n/**\n * Represents one SVG file to be rendered. You can optionally pass the SVG file\n * directly as an argument (Buffer or string) to the constructor. Otherwise the\n * object is a writable stream and you can pipe a file into it. Optionally you\n * can initialize the writable stream with specific options if you pass an\n * object.\n *\n * @see [LibRSVG Default Constructor]{@link\n * https://developer.gnome.org/rsvg/2.40/RsvgHandle.html#rsvg-handle-new}\n * @see [LibRSVG Constructor From Data]{@link\n * https://developer.gnome.org/rsvg/2.40/RsvgHandle.html#rsvg-handle-new-from-data}\n * @see [Writable Stream Constructor]{@link\n * http://nodejs.org/api/stream.html#stream_new_stream_writable_options}\n *\n * @constructor\n * @param {(Buffer|string|Object)} [buffer] - SVG file.\n */\nfunction Rsvg(buffer) {\n\tvar self = this;\n\n\t// Create proper options for the writable stream super constructor.\n\tvar options;\n\tif (Buffer.isBuffer(buffer)) {\n\t\toptions = {};\n\t} else if (typeof(buffer) === 'string') {\n\t\tbuffer = new Buffer(buffer);\n\t\toptions = {};\n\t} else if (buffer === undefined || buffer === null) {\n\t\toptions = {};\n\t} else if (typeof(buffer) === 'object') {\n\t\toptions = buffer;\n\t\tbuffer = null;\n\t} else {\n\t\tthrow new TypeError('Invalid argument: buffer');\n\t}\n\n\t// Inheritance pattern: Invoke super constructor.\n\tWritable.call(self, options);\n\n\t// Create new instance of binding.\n\ttry {\n\t\tself.handle = new binding.Rsvg(buffer);\n\t} catch (error) {\n\t\tthrow new Error('Rsvg load failure: ' + error.message);\n\t}\n\n\tif (buffer) {\n\t\tprocess.nextTick(function() {\n\t\t\tself.emit('load');\n\t\t});\n\t}\n\n\t// When finished piping into this object, we need to tell the binding that by\n\t// invoking the `close()` method.\n\tself.on('finish', function() {\n\t\ttry {\n\t\t\tself.handle.close();\n\t\t} catch (error) {\n\t\t\tif (error.message !== self.lastErrorMessage) {\n\t\t\t\tself.lastErrorMessage = error.message;\n\t\t\t\tself.emit('error', new Error('Rsvg close failure: ' + error.message));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tself.emit('load');\n\t});\n}\n\n// Inherit from writable stream.\nutil.inherits(Rsvg, Writable);\n\n/**\n * Base URI.\n * @member {string}\n */\nRsvg.prototype.baseURI = null;\n\n// Define getter/setter for `baseURI` property.\nObject.defineProperty(Rsvg.prototype, 'baseURI', {\n\tconfigurable: true,\n\tenumerable: true,\n\tget: function() {\n\t\treturn this.handle.getBaseURI();\n\t},\n\tset: function(uri) {\n\t\tthis.handle.setBaseURI(uri);\n\t}\n});\n\n/**\n * Horizontal resolution. Allowed values: >= 0.\n * @deprecated since version 2.0\n * @member {number}\n */\nRsvg.prototype.dpiX = 90;\n\n// Define getter/setter for deprecated `dpiX` property.\nObject.defineProperty(Rsvg.prototype, 'dpiX', {\n\tconfigurable: true,\n\tenumerable: true,\n\tget: util.deprecate(function() {\n\t\treturn this.handle.getDPIX();\n\t}, 'Rsvg#dpiX: DPI does not affect rendering.'),\n\tset: util.deprecate(function(dpi) {\n\t\tthis.handle.setDPIX(dpi);\n\t}, 'Rsvg#dpiX: DPI does not affect rendering.')\n});\n\n/**\n * Vertical resolution. Allowed values: >= 0.\n * @deprecated since version 2.0\n * @member {number}\n */\nRsvg.prototype.dpiY = 90;\n\n// Define getter/setter for deprecated `dpiY` property.\nObject.defineProperty(Rsvg.prototype, 'dpiY', {\n\tconfigurable: true,\n\tenumerable: true,\n\tget: util.deprecate(function() {\n\t\treturn this.handle.getDPIY();\n\t}, 'Rsvg#dpiY: DPI does not affect rendering.'),\n\tset: util.deprecate(function(dpi) {\n\t\tthis.handle.setDPIY(dpi);\n\t}, 'Rsvg#dpiY: DPI does not affect rendering.')\n});\n\n/**\n * Image width. Always integer.\n * @readonly\n * @member {number}\n */\nRsvg.prototype.width = 0;\n\n// Define getter for `width` property.\nObject.defineProperty(Rsvg.prototype, 'width', {\n\tconfigurable: true,\n\tenumerable: true,\n\tget: function() {\n\t\treturn this.handle.getWidth();\n\t}\n});\n\n/**\n * Image height. Always integer.\n * @readonly\n * @member {number}\n */\nRsvg.prototype.height = 0;\n\n// Define getter for `height` property.\nObject.defineProperty(Rsvg.prototype, 'height', {\n\tconfigurable: true,\n\tenumerable: true,\n\tget: function() {\n\t\treturn this.handle.getHeight();\n\t}\n});\n\n/**\n * @see [Node.JS API]{@link\n * http://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1}\n * @private\n */\nRsvg.prototype._write = function(data, encoding, callback) {\n\ttry {\n\t\tthis.handle.write(data);\n\t} catch (error) {\n\t\tthis.lastErrorMessage = error.message;\n\t\tcallback(new Error('Rsvg write failure: ' + error.message));\n\t\treturn;\n\t}\n\n\tcallback();\n};\n\n/**\n * Get the DPI for the outgoing pixbuf.\n *\n * @deprecated since version 2.0\n * @returns {{x: number, y: number}}\n */\nRsvg.prototype.getDPI = util.deprecate(function() {\n\treturn this.handle.getDPI();\n}, 'Rsvg#getDPI(): DPI does not affect rendering.');\n\n/**\n * Set the DPI for the outgoing pixbuf. Common values are 75, 90, and 300 DPI.\n * Passing null to x or y will reset the DPI to whatever the default value\n * happens to be (usually 90). You can set both x and y by specifying only the\n * first argument.\n *\n * @deprecated since version 2.0\n * @param {number} x - Horizontal resolution.\n * @param {number} [y] - Vertical resolution. Set to the same as X if left out.\n */\nRsvg.prototype.setDPI = util.deprecate(function(x, y) {\n\tthis.handle.setDPI(x, y);\n}, 'Rsvg#setDPI(): DPI does not affect rendering.');\n\n/**\n * Get the SVG's size or the size/position of a subelement if id is given. The\n * id must begin with \"#\".\n *\n * @param {string} [id] - Subelement to determine the size and position of.\n * @returns {{width: number, height: number, x: number, y: number}}\n */\nRsvg.prototype.dimensions = function(id) {\n\treturn this.handle.dimensions(id);\n};\n\n/**\n * Checks whether the subelement with given id exists in the SVG document.\n *\n * @param {string} id - Subelement to check existence of.\n * @returns {boolean}\n */\nRsvg.prototype.hasElement = function(id) {\n\treturn this.handle.hasElement(id);\n};\n\n/**\n * Find the drawing area, ie. the smallest area that has image content in the\n * SVG document.\n *\n * @returns {{width: number, height: number, x: number, y: number}}\n */\nRsvg.prototype.autocrop = function() {\n\tvar area = this.handle.autocrop();\n\tarea.x = area.x.toFixed(3) * 1;\n\tarea.y = area.y.toFixed(3) * 1;\n\tarea.width = area.width.toFixed(3) * 1;\n\tarea.height = area.height.toFixed(3) * 1;\n\treturn area;\n};\n\n/**\n * Base render method. Valid high-level formats are: png, pdf, svg, raw. You\n * can also specify the pixel structure of raw images: argb32 (default), rgb24,\n * a8, a1, rgb16_565, and rgb30 (only enabled for Cairo >= 1.12). You can read\n * more about the low-level pixel formats in the [Cairo Documentation]{@link\n * http://cairographics.org/manual/cairo-Image-Surfaces.html#cairo-format-t}.\n *\n * If the element property is given, only that subelement is rendered.\n *\n * The PNG format is the slowest of them all, since it takes time to encode the\n * image as a PNG buffer.\n *\n * @param {Object} [options] - Rendering options.\n * @param {string} [options.format] - One of the formats listed above.\n * @param {number} [options.width] - Output image width, should be an integer.\n * @param {number} [options.height] - Output image height, should be an integer.\n * @param {string} [options.id] - Subelement to render.\n * @returns {{data: Buffer, format: string, width: number, height: number}}\n */\nRsvg.prototype.render = function(options) {\n\tif (arguments.length > 1 || typeof(options) !== 'object') {\n\t\treturn this._renderArgs.apply(this, arguments);\n\t}\n\n\toptions = options || {};\n\n\treturn this.handle.render(\n\t\toptions.width,\n\t\toptions.height,\n\t\toptions.format,\n\t\toptions.id\n\t);\n};\n\n/**\n * @deprecated since version 2.0\n * @private\n */\nRsvg.prototype._renderArgs = util.deprecate(function(width, height, format, id) {\n\treturn this.handle.render(width, height, format ? format.toLowerCase() : null, id);\n}, 'Rsvg#render(): Call render({ format, width, height, ... }) instead.');\n\n/**\n * Render the SVG as a raw memory buffer image. This can be used to create an\n * image that is imported into other image libraries. This render method is\n * usually very fast.\n *\n * The pixel format is ARGB and each pixel is 4 bytes, ie. the buffer size is\n * width*height*4. There are no memory \"spaces\" between rows in the image, like\n * there can be when calling the base render method with pixel formats like A8.\n *\n * @deprecated since version 2.0\n * @param {number} width - Output image width, should be an integer.\n * @param {number} height - Output image height, should be an integer.\n * @param {string} [id] - Subelement to render.\n * @returns {{data: Buffer, format: string, pixelFormat: string, width: number, height: number}}\n */\nRsvg.prototype.renderRaw = util.deprecate(function(width, height, id) {\n\treturn this.render({\n\t\tformat: 'raw',\n\t\twidth: width,\n\t\theight: height,\n\t\telement: id\n\t});\n}, 'Rsvg#renderRaw(): Call render({ format: \"raw\" }) instead.');\n\n/**\n * Render the SVG as a PNG image.\n *\n * @deprecated since version 2.0\n * @param {number} width - Output image width, should be an integer.\n * @param {number} height - Output image height, should be an integer.\n * @param {string} [id] - Subelement to render.\n * @returns {{data: Buffer, format: string, width: number, height: number}}\n */\nRsvg.prototype.renderPNG = util.deprecate(function(width, height, id) {\n\treturn this.render({\n\t\tformat: 'png',\n\t\twidth: width,\n\t\theight: height,\n\t\telement: id\n\t});\n}, 'Rsvg#renderPNG(): Call render({ format: \"png\" }) instead.');\n\n/**\n * Render the SVG as a PDF document.\n *\n * @deprecated since version 2.0\n * @param {number} width - Output document width, should be an integer.\n * @param {number} height - Output document height, should be an integer.\n * @param {string} [id] - Subelement to render.\n * @returns {{data: Buffer, format: string, width: number, height: number}}\n */\nRsvg.prototype.renderPDF = util.deprecate(function(width, height, id) {\n\treturn this.render({\n\t\tformat: 'pdf',\n\t\twidth: width,\n\t\theight: height,\n\t\telement: id\n\t});\n}, 'Rsvg#renderPDF(): Call render({ format: \"pdf\" }) instead.');\n\n/**\n * Render the SVG as an SVG. This seems superfluous, but it can be used to\n * normalize the input SVG. However you can not be sure that the resulting SVG\n * file is smaller than the input. It's not a SVG compression engine. You can\n * be sure that the output SVG follows a more stringent structure.\n *\n * @deprecated since version 2.0\n * @param {number} width - Output document width, should be an integer.\n * @param {number} height - Output document height, should be an integer.\n * @param {string} [id] - Subelement to render.\n * @returns {{data: string, format: string, width: number, height: number}}\n */\nRsvg.prototype.renderSVG = util.deprecate(function(width, height, id) {\n\treturn this.render({\n\t\tformat: 'svg',\n\t\twidth: width,\n\t\theight: height,\n\t\telement: id\n\t});\n}, 'Rsvg#renderSVG(): Call render({ format: \"svg\" }) instead.');\n\n/**\n * String representation of this SVG render object.\n * @returns {string}\n */\nRsvg.prototype.toString = function() {\n\tvar obj = {};\n\n\tvar baseURI = this.baseURI;\n\tif (baseURI) {\n\t\tobj.baseURI = baseURI;\n\t}\n\n\tobj.width = this.width;\n\tobj.height = this.height;\n\n\treturn '{ [' + this.constructor.name + ']' + util.inspect(obj).slice(1);\n};\n\n// Export the Rsvg object.\nexports.Rsvg = Rsvg;\n","/home/travis/build/npmtest/node-npmtest-rsvg/node_modules/rsvg/Gruntfile.js":"\n'use strict';\n\nmodule.exports = function(grunt) {\n\n\t// Project configuration.\n\tgrunt.initConfig({\n\t\tpkg: grunt.file.readJSON('package.json'),\n\n\t\tjshint: {\n\t\t\toptions: {\n\t\t\t\tjshintrc: true\n\t\t\t},\n\t\t\tgruntfile: {\n\t\t\t\tsrc: 'Gruntfile.js',\n\t\t\t},\n\t\t\tlib: {\n\t\t\t\tsrc: ['index.js']\n\t\t\t},\n\t\t\ttests: {\n\t\t\t\tsrc: ['test/**/*.js']\n\t\t\t}\n\t\t},\n\n\t\tmochaTest: {\n\t\t\ttest: {\n\t\t\t\toptions: {\n\t\t\t\t\tglobals: ['should'],\n\t\t\t\t\ttimeout: 3000,\n\t\t\t\t\tui: 'bdd',\n\t\t\t\t\treporter: 'spec',\n\t\t\t\t\tcolors: true,\n\t\t\t\t\trequire: ['test/helpers/chai']\n\t\t\t\t},\n\t\t\t\tsrc: ['test/**/*.test.js']\n\t\t\t}\n\t\t}\n\t});\n\n\t// Tasks.\n\tgrunt.loadNpmTasks('grunt-contrib-jshint');\n\tgrunt.loadNpmTasks('grunt-mocha-test');\n\n\t// Default task.\n\tgrunt.registerTask('default', ['jshint']);\n\tgrunt.registerTask('test', ['jshint', 'mochaTest']);\n\n};\n"}